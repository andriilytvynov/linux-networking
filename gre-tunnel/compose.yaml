# Verify GRE tunnel between n2 and n4:
# root@n2:/# traceroute 10.0.0.2 -n
# traceroute to 10.0.0.2 (10.0.0.2), 30 hops max, 60 byte packets
#  1  * * *
#  2  10.0.0.2  0.093 ms  0.077 ms  0.076 ms
#
# Now traffic from n4 to n1 is encapsulated in GRE tunnel:
# root@n4:/# traceroute 1.1.1.1 -n
# traceroute to 1.1.1.1 (1.1.1.1), 30 hops max, 60 byte packets
#  1  * * *
#  2  1.1.1.1  0.146 ms  0.147 ms  0.113 ms
#
# Traffic from n1 back to n4 does not use GRE tunnel:
# root@n1:/# traceroute 3.3.3.2 -n
# traceroute to 3.3.3.2 (3.3.3.2), 30 hops max, 60 byte packets
#  1  1.1.1.2  0.128 ms  0.059 ms  0.056 ms
#  2  2.2.2.2  0.087 ms  0.074 ms  0.072 ms
#  3  3.3.3.2  0.133 ms  0.110 ms  0.108 ms
#
#╭────╮.1            .2╭────╮.1            .2╭────╮.1            .2╭────╮
#│ n1 ├── 1.1.1.0/24 ──┤ n2 ├── 2.2.2.0/24 ──┤ n3 ├── 3.3.3.0/24 ──┤ n4 │
#╰────╯                ╰─┬──╯                ╰────╯                ╰──┬─╯
#                        │.1                                        .2│
#                        ╰────────────── GRE 10.0.0.0/30 ─────────────╯
#
# Note
# You can use tcpdump on the node you are trying to ping to get the clue why
# traffic is not passing through, i.e no proper route back to the source:
# root@n1:/# tcpdump -i eth0 icmp
#
# Note
# You can use `mode ipip` instead of `mode gre` to encapsulate traffic using
# IP-in-IP tunneling.
#
services:
  n1:
    image: linux-node
    container_name: n1
    privileged: true
    networks:
      net1:
        ipv4_address: 1.1.1.1
    entrypoint: >-
      bash -c '
        hostname n1 &&
        echo 1 > /proc/sys/net/ipv4/ip_forward &&
        ip route del default &&
        ip route add 2.2.2.0/24 via 1.1.1.2 &&
        ip route add 3.3.3.0/24 via 1.1.1.2 &&

        ip route add 10.0.0.0/30 via 1.1.1.2

        tail -f /dev/null
      '
  n2:
    image: linux-node
    container_name: n2
    privileged: true
    networks:
      net1:
        ipv4_address: 1.1.1.2
      net2:
        ipv4_address: 2.2.2.1
    entrypoint: >-
      bash -c '
        hostname n2 &&
        echo 1 > /proc/sys/net/ipv4/ip_forward &&
        ip route del default &&
        ip route add 3.3.3.0/24 via 2.2.2.2 &&

        ip tunnel add gre1 mode gre local 2.2.2.1 remote 3.3.3.2 &&
        ip addr add 10.0.0.1/30 dev gre1 &&
        ip link set gre1 up &&

        tail -f /dev/null
      '
  n3:
    image: linux-node
    container_name: n3
    privileged: true
    networks:
      net2:
        ipv4_address: 2.2.2.2
      net3:
        ipv4_address: 3.3.3.1
    entrypoint: >-
      bash -c '
        hostname n3 &&
        echo 1 > /proc/sys/net/ipv4/ip_forward &&
        ip route del default &&
        ip route add 1.1.1.0/24 via 2.2.2.1 &&
        tail -f /dev/null
      '
  n4:
    image: linux-node
    container_name: n4
    privileged: true
    networks:
      net3:
        ipv4_address: 3.3.3.2
    entrypoint: >-
      bash -c '
        hostname n4 &&
        echo 1 > /proc/sys/net/ipv4/ip_forward &&
        ip route del default &&
        ip route add 1.1.1.0/24 via 3.3.3.1 &&
        ip route add 2.2.2.0/24 via 3.3.3.1 &&

        ip tunnel add gre1 mode gre local 3.3.3.2 remote 2.2.2.1 &&
        ip addr add 10.0.0.2/30 dev gre1 &&
        ip link set gre1 up &&

        ip route del 1.1.1.0/24
        ip route add 1.1.1.0/24 via 10.0.0.1

        tail -f /dev/null
      '
networks:
  net1:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 1.1.1.0/24
          gateway: 1.1.1.254
  net2:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 2.2.2.0/24
          gateway: 2.2.2.254
  net3:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 3.3.3.0/24
          gateway: 3.3.3.254